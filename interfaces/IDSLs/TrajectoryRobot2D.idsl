module RoboCompTrajectoryRobot2D
{
	exception RoboCompException
	{
		string text;
	};
	struct TargetPose
	{
		float x;                 // millimeters
		float y;
		float z;
		float rx;    
		float ry;                // radians
		float rz;
		bool doRotation;         // if True orientates the robot at ry radians with the world z axis (around world's yaxis)
	};

	struct NavState
	{
		long elapsedTime;        // milliseconds since beginning of task
		string state;						 // copy of internal SM current state
		long estimatedTime;			 // estimates time (ms) to finish
		long planningTime;			 // time (ms) taken to plan the trajectory
		float x;                 // x current position of robot
		float z;                 // z current position of robot
		float ang;               // ry current angular position of the robot
		float advV;              // current forward speed (mm/sg)
		float rotV;							 // current rotational speed (r/s)
		float distanceToTarget;  // total distance to target
		string description;			 // extended description
	};

	dictionary<string, string> NavigationParameterMap;
	//sequence<TargetPose> TargetSeq;

	interface TrajectoryRobot2D
	{
		float go(TargetPose target) throws RoboCompException; // Takes the robot to target. ry is orientation if doRotation is True
		//float goMulti(TargetSeq targetSeq, float xRef, float zRef, float threshold) throws RoboCompException;	
		float goReferenced(TargetPose target, float xRef, float zRef, float threshold) throws RoboCompException; // ry is orientation if doRotation is True
		float goBackwards(TargetPose target) throws RoboCompException;    // Moves the robot directly backwards
		float changeTarget(TargetPose target)throws RoboCompException;    // Change last point of curent trajectory
		NavState getState();                                              // Get current state
		void stop();                                                      // Stop the robot
		
		void mapBasedTarget(NavigationParameterMap parameters);
	};
};
  
